Requirements
  The expression system requires "custom_functions" and
  "action_wheel". There needs to be a page present in
  "actionWheel.pages" called "expressions". This is where all
  the actions for expressions will go to. This page should be
  already there in "config.lua", generated by
  "actionWheel.loadFolders".

Setting up the Expression System
  -> Most of the setup has already been done in config.lua,
     this is for if you completely change the avatar model.

  The expression system takes two model parts for the face, in
  order for the ability to mix and match different frames,
  saving storage. These two parts are defined through the
  following code:
-----
local expressions = require("expressions")
expressions.eyeParts(
    models.model.path.to.leftEyePart,
    models.model.path.to.rightEyePart
)
-----
  This isnt all the set up code you need, because first we need
  to define some expressions! These functions probably break if
  called more than one time, so dont do that.

Creating Expressions
  Expressions work using frames, and then those frames can be
  used in the expression. The data for a single frame contains
  the name of the frame (in CamelCase), the file leading to the
  texture of the frame, and the UV coordinates. Here's how to do
  it:
-----
local expressions = require("expressions")
expressions.eyeParts(
    models.model.path.to.leftEyePart,
    models.model.path.to.rightEyePart
)
expressions.loadFrames({
    -- Name       Texture   UV
    {"Default","model.face",0,0},
    {"None","model.face",0,0.25}
})
-----
  Now that we have the frames, here's a basic explanation on how
  the textures are formatted: All the textures are in the
  "model.bbmodel" file, otherwise they wouldnt show up for Figura.
  Each file has two columns, and four rows. The UV values in the
  example expect there to be an opened face in the first row,
  first column, and a closed face on the second row, first column.

  Alright, that's how frames work. Now we need to define the
  some expressions! To start off, there are multiple types of
  expressions:

  1. Static - No animations, just the single frame
  2. Matched static - Combine two static frames for left and right
  3. Blinking - Changes the frame to another at random intervals
  4. Matched Blinking - Same as above, just with two frames,
                        and two blinking frames
  5. Animated - An array of frames, that get displayed one by one

  Each type is configured in a slightly different way, let's start
  with something simple (code from previous example is still
  there):
-----
local expressions = require("expressions")
expressions.eyeParts(...)
expressions.loadFrames(...)
expressions.loadExpressions({
    -- AW Display Name |IcoUV |  Type  |intrv.|Normal F.|BlinkF.
    {{"Basic Expression",0,0},{"blinking",40},{"Default","None"}}
})
-----
  This example adds a basic "blinking"-type expression. It blinks
  at a chance of 2.44% (if 0..40 == 0) every tick.



  ----- !!! IMPORTANT !!! -----

  WITH THIS INFORMATION, YOU NOW CAN DEFINE THE DEFAULT EXPRESSION.
  Here is how you do that:
-----
...
expressions.default(<type, i.e. "blinking">,<frames: table, i.e. {"Default","None"}>, <if necessary (for animated, blinking, matchedBlinking), changeValue, i.e. 40>)
...
-----

  ----------------------------



  Now that youve set up default expressions, here's an example
  of how to define every type of frame:
  (Btw., for animations, the change value is how long in ticks
  a frame lasts.)
-----
...
expressions.loadExpressions({
    {{"Static Ex.",0,0},{"static"},{"Frame"}},
    {{"Matched Static Ex.",0,0},{"matchedStatic"},{"Frame1","Frame2"}},
    {{"Blinking Ex.",0,0},{"blinking",<changerValue>},{"FrameOpen","FrameClosed"}},
    {{"Matched Blinking Ex.",0,0},{"matchedBlinking",<changerValue>},{{"Frame1Open","Frame1Closed"},{"Frame2Open","Frame2Closed"}}},
    {{"Animation Ex.",0,0},{"animated",<frame duration in ticks>},{
        "Frame1",
        "Frame2",
        "Frame3",
        "Frame4"
    }}
})
-----

Integrations with the animations
  You might wanna swap the face during an animation. Luckily,
  there is a way without disrupting the normal expressions.
  Simply run the code "AnimFace(true)" as a Lua instruction
  keyframe at the start of your animation and "AnimFace(false)"
  at the end of your animation. Now you can run
  "SetFace("<Frame>","<Frame>")" in any Lua instruction key
  in the animation!



  For questions regarding this system please contact me!